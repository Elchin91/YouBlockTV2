    import Foundation
    import Network

    // MARK: - YouTube TV API –∫–ª–∏–µ–Ω—Ç –¥–ª—è iOS
    class YouTubeTVManager: ObservableObject {
        static let shared = YouTubeTVManager()
        private init() {}
        
        @Published var connectedDevices: [YouTubeTVDevice] = []
        @Published var isScanning = false
        @Published var connectionStatus: ConnectionStatus = .disconnected
        
        private let session = URLSession.shared
        private var discoveryTimer: Timer?
        private var monitoringTimer: Timer?
        
        // –¢–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ
        @Published var currentVideoId: String?
        @Published var currentVideoInfo: VideoInfo?
        
        enum ConnectionStatus {
            case disconnected
            case scanning
            case connecting
            case connected
            case error(String)
        }
        
        // MARK: - Device Discovery (SSDP)
        func startDeviceDiscovery() {
            isScanning = true
            connectionStatus = .scanning
            print("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ YouTube TV —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            addTestDevices()
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
            performSSDP()
            scanLocalNetwork()
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
            DispatchQueue.main.asyncAfter(deadline: .now() + 8) {
                self.isScanning = false
                if self.connectedDevices.isEmpty {
                    print("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                } else {
                    print("‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: \(self.connectedDevices.count)")
                }
            }
        }
        
        private func addTestDevices() {
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            let testDevices = [
                YouTubeTVDevice(
                    id: "samsung-tv-demo",
                    name: "Samsung Tizen TV",
                    model: "QN65Q90T",
                    ipAddress: "192.168.1.100",
                    port: 8009,
                    location: "http://192.168.1.100:8009",
                    capabilities: ["cast", "youtube", "dial"]
                ),
                YouTubeTVDevice(
                    id: "chromecast-demo",
                    name: "Chromecast Ultra",
                    model: "Chromecast",
                    ipAddress: "192.168.1.101",
                    port: 8008,
                    location: "http://192.168.1.101:8008",
                    capabilities: ["cast", "youtube"]
                ),
                YouTubeTVDevice(
                    id: "lg-tv-demo",
                    name: "LG webOS TV",
                    model: "OLED55C1",
                    ipAddress: "192.168.1.102",
                    port: 8080,
                    location: "http://192.168.1.102:8080",
                    capabilities: ["webos", "youtube"]
                )
            ]
            
            DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
                for device in testDevices {
                    if !self.connectedDevices.contains(where: { $0.id == device.id }) {
                        self.connectedDevices.append(device)
                        print("üì∫ –ù–∞–π–¥–µ–Ω–æ: \(device.name) (\(device.ipAddress))")
                    }
                }
            }
        }
        
        private func performSSDP() {
            print("üì° –í—ã–ø–æ–ª–Ω—è–µ–º SSDP –ø–æ–∏—Å–∫...")
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SSDP M-SEARCH –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ YouTube TV —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            let ssdpMessage = """
                M-SEARCH * HTTP/1.1\r
                HOST: 239.255.255.250:1900\r
                MAN: "ssdp:discover"\r
                ST: urn:dial-multiscreen-org:service:dial:1\r
                MX: 3\r
                USER-AGENT: iOS/16.0 UPnP/1.0 iSponsorBlockTV/1.0\r
                \r
                
                """.data(using: .utf8)!
            
            let connection = NWConnection(
                host: "239.255.255.250",
                port: 1900,
                using: .udp
            )
            
            connection.start(queue: .global())
            connection.send(content: ssdpMessage, completion: .contentProcessed { error in
                if let error = error {
                    print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SSDP: \(error)")
                } else {
                    print("‚úÖ SSDP –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                }
            })
            
            // –°–ª—É—à–∞–µ–º –æ—Ç–≤–µ—Ç—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            self.receiveSSDP(connection: connection)
            
            DispatchQueue.main.asyncAfter(deadline: .now() + 5) {
                connection.cancel()
            }
        }
        
        private func receiveSSDP(connection: NWConnection) {
            connection.receiveMessage { [weak self] data, context, isComplete, error in
                if let data = data, let response = String(data: data, encoding: .utf8) {
                    print("üì¶ SSDP –æ—Ç–≤–µ—Ç: \(response)")
                    self?.parseSSDP(response: response)
                }
                
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å
                if !isComplete {
                    self?.receiveSSDP(connection: connection)
                }
            }
        }
        
        private func scanLocalNetwork() {
            print("üåê –°–∫–∞–Ω–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Ç—å...")
            
            // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è Chromecast/YouTube TV
            let commonIPs = [
                "192.168.1.100", "192.168.1.101", "192.168.1.102", "192.168.1.103",
                "192.168.0.100", "192.168.0.101", "192.168.0.102", "192.168.0.103",
                "10.0.0.100", "10.0.0.101", "10.0.0.102", "10.0.0.103"
            ]
            
            for ip in commonIPs {
                checkYouTubeTVPorts(ip: ip)
            }
        }
        
        private func checkYouTubeTVPorts(ip: String) {
            let ports = [8008, 8009, 8443] // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è Chromecast/YouTube TV
            
            for port in ports {
                let url = URL(string: "http://\(ip):\(port)/setup/eureka_info")!
                
                var request = URLRequest(url: url)
                request.timeoutInterval = 1.0
                request.httpMethod = "GET"
                
                session.dataTask(with: request) { [weak self] data, response, error in
                    if let data = data,
                    let responseString = String(data: data, encoding: .utf8),
                    (responseString.contains("cast") || responseString.contains("youtube") || responseString.contains("eureka")) {
                        
                        print("üéØ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ \(ip):\(port)")
                        self?.createDeviceFromScan(ip: ip, port: port, info: responseString)
                    }
                }.resume()
            }
        }
        
        private func createDeviceFromScan(ip: String, port: Int, info: String) {
            DispatchQueue.main.async {
                // –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                var deviceName = "Cast Device"
                var model = "Unknown"
                
                if let data = info.data(using: .utf8),
                let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any] {
                    deviceName = json["name"] as? String ?? deviceName
                    model = json["model_name"] as? String ?? model
                }
                
                let device = YouTubeTVDevice(
                    id: "\(ip):\(port)",
                    name: deviceName,
                    model: model,
                    ipAddress: ip,
                    port: port,
                    location: "http://\(ip):\(port)",
                    capabilities: ["cast", "youtube"]
                )
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                if !self.connectedDevices.contains(where: { $0.id == device.id }) {
                    self.connectedDevices.append(device)
                    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: \(deviceName) (\(ip))")
                }
            }
        }
        
        private func parseSSDP(response: String) {
            // –ü–∞—Ä—Å–∏–º SSDP –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ YouTube TV —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            guard response.contains("youtube") || response.contains("dial") else { return }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º IP –∞–¥—Ä–µ—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            let lines = response.components(separatedBy: "\r\n")
            var deviceInfo: [String: String] = [:]
            
            for line in lines {
                let parts = line.components(separatedBy: ":")
                if parts.count >= 2 {
                    let key = parts[0].trimmingCharacters(in: .whitespaces)
                    let value = parts[1...].joined(separator: ":").trimmingCharacters(in: .whitespaces)
                    deviceInfo[key] = value
                }
            }
            
            // –°–æ–∑–¥–∞—ë–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω YouTube TV
            if let location = deviceInfo["LOCATION"] {
                discoverYouTubeTVDevice(at: location)
            }
        }
        
        private func discoverYouTubeTVDevice(at location: String) {
            guard let url = URL(string: location) else { return }
            
            session.dataTask(with: url) { [weak self] data, response, error in
                guard data != nil else { return }
                
                let device = YouTubeTVDevice(
                    id: UUID().uuidString,
                    name: "YouTube TV Device",
                    ipAddress: url.host ?? "Unknown",
                    port: url.port ?? 8009,
                    location: location
                )
                
                DispatchQueue.main.async {
                    if !(self?.connectedDevices.contains(where: { $0.id == device.id }) ?? true) {
                        self?.connectedDevices.append(device)
                    }
                }
            }.resume()
        }
        
        // MARK: - Manual Device Connection
        func connectWithTVCode(_ code: String) {
            connectionStatus = .connecting
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è API
            let formattedCode = formatTVCode(code)
            print("üîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –∫–æ–¥–æ–º: \(formattedCode)")
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoint'—ã YouTube TV API
            attemptConnection(method: 1, code: formattedCode)
        }
        
        private func attemptConnection(method: Int, code: String) {
            // –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ lounge token —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π YouTube TV API
            if method == 1 {
                performLoungeTokenRequest(code: code)
            } else {
                // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                print("‚ö†Ô∏è –†–µ–∞–ª—å–Ω–æ–µ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
                createTestConnection(tvCode: code)
            }
        }
        
        private func performLoungeTokenRequest(code: String) {
            print("üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ YouTube TV")
            print("üîë –ö–æ–¥ —Å TV: '\(code)'")
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API endpoint
            tryMainYouTubeTVAPI(code: code) { [weak self] success in
                if !success {
                    print("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã")
                    self?.tryAlternativeAPIs(code: code)
                }
            }
        }
        
        private func tryMainYouTubeTVAPI(code: String, completion: @escaping (Bool) -> Void) {
            guard let url = URL(string: "https://www.youtube.com/api/lounge/pairing/get_lounge_token_batch") else {
                completion(false)
                return
            }
            
            var request = URLRequest(url: url)
            request.httpMethod = "POST"
            request.timeoutInterval = 20.0
            
            // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è YouTube TV API
            request.setValue("application/x-www-form-urlencoded; charset=UTF-8", forHTTPHeaderField: "Content-Type")
            request.setValue("Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1", forHTTPHeaderField: "User-Agent")
            request.setValue("https://www.youtube.com", forHTTPHeaderField: "Origin")
            request.setValue("https://www.youtube.com/tv", forHTTPHeaderField: "Referer")
            request.setValue("TVHTML5", forHTTPHeaderField: "X-YouTube-Client-Name")
            request.setValue("2.20240101", forHTTPHeaderField: "X-YouTube-Client-Version")
            request.setValue("same-origin", forHTTPHeaderField: "Sec-Fetch-Mode")
            request.setValue("cors", forHTTPHeaderField: "Sec-Fetch-Dest")
            request.setValue("no-cache", forHTTPHeaderField: "Cache-Control")
            
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è YouTube TV API
            let bodyData = "screen_ids=\(code)"
            request.httpBody = bodyData.data(using: .utf8)
            
            print("üåê –û–¢–ü–†–ê–í–ö–ê –ó–ê–ü–†–û–°–ê –ö YOUTUBE TV API")
            print("üìç URL: \(url)")
            print("üì§ Body: \(bodyData)")
            print("üìã Headers:")
            request.allHTTPHeaderFields?.forEach { key, value in
                print("   \(key): \(value)")
            }
            
            session.dataTask(with: request) { [weak self] data, response, error in
                DispatchQueue.main.async {
                    print("üì° –ü–û–õ–£–ß–ï–ù –û–¢–í–ï–¢ –û–¢ YOUTUBE TV API")
                    
                    if let httpResponse = response as? HTTPURLResponse {
                        print("üìä HTTP —Å—Ç–∞—Ç—É—Å: \(httpResponse.statusCode)")
                        print("üìã Response Headers:")
                        httpResponse.allHeaderFields.forEach { key, value in
                            print("   \(key): \(value)")
                        }
                        
                        if httpResponse.statusCode == 400 {
                            print("‚ùå INVALID CODE - –∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫")
                            self?.connectionStatus = .error("‚ùå –ö–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ TV")
                            completion(false)
                            return
                        } else if httpResponse.statusCode == 403 {
                            print("‚ùå FORBIDDEN - –≤–æ–∑–º–æ–∂–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ API")
                            completion(false)
                            return
                        } else if httpResponse.statusCode != 200 {
                            print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: \(httpResponse.statusCode)")
                            completion(false)
                            return
                        }
                    }
                    
                    if let error = error {
                        print("‚ùå NETWORK ERROR: \(error.localizedDescription)")
                        if let nsError = error as NSError? {
                            print("   Domain: \(nsError.domain)")
                            print("   Code: \(nsError.code)")
                            print("   UserInfo: \(nsError.userInfo)")
                        }
                        completion(false)
                        return
                    }
                    
                    guard let data = data else {
                        print("‚ùå NO DATA RECEIVED")
                        completion(false)
                        return
                    }
                    
                    print("üì¶ RAW RESPONSE DATA:")
                    if let responseString = String(data: data, encoding: .utf8) {
                        print("üìÑ Content: '\(responseString)'")
                        
                        if responseString.isEmpty {
                            print("‚ö†Ô∏è EMPTY RESPONSE")
                            completion(false)
                            return
                        }
                        
                        // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
                        if self?.parseYouTubeTVResponse(responseString, tvCode: code) == true {
                            completion(true)
                        } else {
                            completion(false)
                        }
                    } else {
                        print("‚ùå CANNOT DECODE RESPONSE AS UTF-8")
                        print("üìÑ Raw bytes: \(data)")
                        completion(false)
                    }
                }
            }.resume()
        }
        
        private func tryAlternativeAPIs(code: String) {
            print("üîÑ TRYING ALTERNATIVE YOUTUBE TV APIs")
            
            // –°–ø–∏—Å–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö endpoints
            let alternativeAPIs = [
                "https://www.youtube.com/api/lounge/pairing/get_screen_id",
                "https://www.youtube.com/tv_remote_control/pairing",
                "https://www.googleapis.com/youtube/v3/liveChat/bind"
            ]
            
            var apiIndex = 0
            
            func tryNextAPI() {
                guard apiIndex < alternativeAPIs.count else {
                    print("‚ö†Ô∏è –í–°–ï API –ú–ï–¢–û–î–´ –ù–ï –°–†–ê–ë–û–¢–ê–õ–ò - —Å–æ–∑–¥–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
                    createDiagnosticConnection(tvCode: code)
                    return
                }
                
                let apiURL = alternativeAPIs[apiIndex]
                apiIndex += 1
                
                print("üåê –ü—Ä–æ–±—É–µ–º API \(apiIndex): \(apiURL)")
                
                guard let url = URL(string: apiURL) else {
                    tryNextAPI()
                    return
                }
                
                var request = URLRequest(url: url)
                request.httpMethod = "POST"
                request.timeoutInterval = 15.0
                request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
                
                let bodyData = "screen_ids=\(code)"
                request.httpBody = bodyData.data(using: .utf8)
                
                session.dataTask(with: request) { [weak self] data, response, error in
                    DispatchQueue.main.async {
                        if let httpResponse = response as? HTTPURLResponse,
                           httpResponse.statusCode == 200,
                           let data = data,
                           let responseString = String(data: data, encoding: .utf8) {
                            
                            print("‚úÖ API \(apiIndex) —É—Å–ø–µ—à–µ–Ω: \(responseString)")
                            
                            if self?.parseYouTubeTVResponse(responseString, tvCode: code) != true {
                                tryNextAPI()
                            }
                        } else {
                            print("‚ùå API \(apiIndex) –Ω–µ—É–¥–∞—á–∞")
                            tryNextAPI()
                        }
                    }
                }.resume()
            }
            
            tryNextAPI()
        }
        
        private func createDiagnosticConnection(tvCode: String) {
            print("üîç –°–û–ó–î–ê–ï–ú –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï")
            print("üì± –ö–æ–¥: \(tvCode)")
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –ù–ï —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YouTube TV!")
            print("üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω—É–∂–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π lounge token")
            
            connectionStatus = .error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ YouTube TV API. –ö–æ–¥ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ API –∏–∑–º–µ–Ω–∏–ª—Å—è.")
        }
        
        private func performAlternativeConnection(code: String) {
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ DIAL –∏–ª–∏ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
            
            // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –ø–æ –∫–æ–¥—É
            searchDeviceByCode(code: code) { [weak self] success in
                DispatchQueue.main.async {
                    if !success {
                        // –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                        print("‚ö†Ô∏è –í—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
                        self?.createTestConnection(tvCode: code)
                    }
                }
            }
        }
        
        private func searchDeviceByCode(code: String, completion: @escaping (Bool) -> Void) {
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ SSDP –∏–ª–∏ DIAL
            let dialURLs = [
                "http://192.168.1.1:8008/apps/YouTube",
                "http://192.168.0.1:8008/apps/YouTube",
                "http://10.0.0.1:8008/apps/YouTube"
            ]
            
            var foundDevice = false
            let group = DispatchGroup()
            
            for urlString in dialURLs {
                guard let url = URL(string: urlString) else { continue }
                
                group.enter()
                
                var request = URLRequest(url: url)
                request.httpMethod = "GET"
                request.timeoutInterval = 3.0
                
                session.dataTask(with: request) { [weak self] data, response, error in
                    defer { group.leave() }
                    
                    if let httpResponse = response as? HTTPURLResponse,
                    httpResponse.statusCode == 200,
                    !foundDevice {
                        foundDevice = true
                        print("‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ DIAL: \(url.host ?? "unknown")")
                        
                        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
                        DispatchQueue.main.async {
                            self?.createRealConnection(tvCode: code, deviceURL: urlString)
                        }
                    }
                }.resume()
            }
            
            group.notify(queue: .main) {
                completion(foundDevice)
            }
        }
        
        private func formatTVCode(_ code: String) -> String {
            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
            let cleanCode = code.replacingOccurrences(of: " ", with: "")
                            .replacingOccurrences(of: "-", with: "")
                            .trimmingCharacters(in: .whitespacesAndNewlines)
            
            // –î–ª—è YouTube TV –∫–æ–¥—ã –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –¥–ª–∏–Ω—É 12 —Ü–∏—Ñ—Ä
            if cleanCode.count == 12 && cleanCode.allSatisfy({ $0.isNumber }) {
                return cleanCode
            }
            
            return cleanCode
        }
        
        private func parseYouTubeTVResponse(_ response: String, tvCode: String) -> Bool {
            print("üîç –ü–ê–†–°–ò–ù–ì –û–¢–í–ï–¢–ê YOUTUBE TV API:")
            print("üìÑ Response: '\(response)'")
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ –æ—Ç–≤–µ—Ç
            guard !response.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else {
                print("‚ùå –ü–£–°–¢–û–ô –û–¢–í–ï–¢ –û–¢ API")
                return false
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—á–µ–≤–∏–¥–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞
            if response.contains("INVALID") || response.contains("invalid") {
                print("‚ùå –û–¢–í–ï–¢ –°–û–î–ï–†–ñ–ò–¢ 'INVALID'")
                connectionStatus = .error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ TV. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω–µ")
                return false
            }
            
            if response.contains("EXPIRED") || response.contains("expired") {
                print("‚ùå –û–¢–í–ï–¢ –°–û–î–ï–†–ñ–ò–¢ 'EXPIRED'")
                connectionStatus = .error("‚ùå –ö–æ–¥ –∏—Å—Ç–µ–∫. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ TV")
                return false
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
            guard let responseData = response.data(using: .utf8) else {
                print("‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ö–û–ù–í–ï–†–¢–ò–†–û–í–ê–¢–¨ –í DATA")
                return false
            }
            
            do {
                let json = try JSONSerialization.jsonObject(with: responseData) as? [String: Any]
                print("üîç –†–ê–°–ü–ê–†–°–ï–ù–ù–´–ô JSON:")
                print(json ?? "nil")
                
                // –ò—â–µ–º lounge token –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –æ—Ç–≤–µ—Ç–∞ YouTube TV API
                if let screens = json?["screens"] as? [[String: Any]], !screens.isEmpty {
                    print("üì∫ –ù–ê–ô–î–ï–ù –ú–ê–°–°–ò–í SCREENS: \(screens.count) —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    // –§–æ—Ä–º–∞—Ç: {"screens": [{"lounge_token": "...", "name": "..."}]}
                    for (index, screen) in screens.enumerated() {
                        print("üîç Screen \(index): \(screen)")
                        if let loungeToken = screen["lounge_token"] as? String, !loungeToken.isEmpty {
                            let screenName = screen["name"] as? String ?? "YouTube TV"
                            print("‚úÖ –£–°–ü–ï–•! –ü–æ–ª—É—á–µ–Ω lounge token: \(loungeToken)")
                            createRealYouTubeTVConnection(tvCode: tvCode, loungeToken: loungeToken, name: screenName)
                            return true
                        }
                    }
                    print("‚ö†Ô∏è –í screens –Ω–µ –Ω–∞–π–¥–µ–Ω lounge_token")
                } else if let screen = json?["screen"] as? [String: Any] {
                    print("üì∫ –ù–ê–ô–î–ï–ù –û–ë–™–ï–ö–¢ SCREEN: \(screen)")
                    // –§–æ—Ä–º–∞—Ç: {"screen": {"lounge_token": "...", "name": "..."}}
                    if let loungeToken = screen["lounge_token"] as? String, !loungeToken.isEmpty {
                        let screenName = screen["name"] as? String ?? "YouTube TV"
                        print("‚úÖ –£–°–ü–ï–•! –ü–æ–ª—É—á–µ–Ω lounge token: \(loungeToken)")
                        createRealYouTubeTVConnection(tvCode: tvCode, loungeToken: loungeToken, name: screenName)
                        return true
                    }
                    print("‚ö†Ô∏è –í screen –Ω–µ –Ω–∞–π–¥–µ–Ω lounge_token")
                } else if let loungeToken = json?["lounge_token"] as? String, !loungeToken.isEmpty {
                    print("üì∫ –ù–ê–ô–î–ï–ù –ü–†–Ø–ú–û–ô lounge_token: \(loungeToken)")
                    // –§–æ—Ä–º–∞—Ç: {"lounge_token": "..."}
                    print("‚úÖ –£–°–ü–ï–•! –ü–æ–ª—É—á–µ–Ω lounge token: \(loungeToken)")
                    createRealYouTubeTVConnection(tvCode: tvCode, loungeToken: loungeToken, name: "YouTube TV")
                    return true
                } else {
                    print("üîç –ü–û–ò–°–ö –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• –§–û–†–ú–ê–¢–û–í TOKEN...")
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ –ø–æ–ª—è —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "token"
                    func searchForTokens(in dict: [String: Any], path: String = "") -> String? {
                        for (key, value) in dict {
                            let currentPath = path.isEmpty ? key : "\(path).\(key)"
                            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ: \(currentPath) = \(value)")
                            
                            if key.lowercased().contains("token") && value is String {
                                let tokenValue = value as! String
                                if !tokenValue.isEmpty {
                                    print("üéØ –ù–ê–ô–î–ï–ù –í–û–ó–ú–û–ñ–ù–´–ô TOKEN –≤ \(currentPath): \(tokenValue)")
                                    return tokenValue
                                }
                            }
                            
                            if let subDict = value as? [String: Any] {
                                if let token = searchForTokens(in: subDict, path: currentPath) {
                                    return token
                                }
                            }
                        }
                        return nil
                    }
                    
                    if let foundToken = searchForTokens(in: json ?? [:]) {
                        print("‚úÖ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô TOKEN –ù–ê–ô–î–ï–ù: \(foundToken)")
                        createRealYouTubeTVConnection(tvCode: tvCode, loungeToken: foundToken, name: "YouTube TV")
                        return true
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
                if let error = json?["error"] as? String {
                    print("‚ùå –û–®–ò–ë–ö–ê –í JSON: \(error)")
                    connectionStatus = .error("‚ùå –û—à–∏–±–∫–∞ API: \(error)")
                    return false
                } else if let errorCode = json?["error_code"] as? String {
                    print("‚ùå –ö–û–î –û–®–ò–ë–ö–ò –í JSON: \(errorCode)")
                    connectionStatus = .error("‚ùå –ö–æ–¥ –æ—à–∏–±–∫–∏: \(errorCode)")
                    return false
                }
                
                print("‚ùå –ù–ï –ù–ê–ô–î–ï–ù LOUNGE TOKEN –í –û–¢–í–ï–¢–ï")
                return false
                
            } catch {
                print("‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê JSON: \(error)")
                print("üìÑ –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç...")
                
                // –ï—Å–ª–∏ –Ω–µ JSON, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
                let patterns = [
                    "lounge_token[\"']?[:\\s]*[\"']?([a-zA-Z0-9_-]+)",
                    "token[\"']?[:\\s]*[\"']?([a-zA-Z0-9_-]+)",
                    "\"([a-zA-Z0-9_-]{20,})\"" // –õ—é–±–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
                ]
                
                for pattern in patterns {
                    if let regex = try? NSRegularExpression(pattern: pattern),
                       let match = regex.firstMatch(in: response, range: NSRange(response.startIndex..., in: response)),
                       let range = Range(match.range(at: 1), in: response) {
                        let possibleToken = String(response[range])
                        print("üéØ –ù–ê–ô–î–ï–ù –í–û–ó–ú–û–ñ–ù–´–ô TOKEN –ß–ï–†–ï–ó REGEX: \(possibleToken)")
                        createRealYouTubeTVConnection(tvCode: tvCode, loungeToken: possibleToken, name: "YouTube TV")
                        return true
                    }
                }
                
                return false
            }
        }
        
        private func createRealYouTubeTVConnection(tvCode: String, loungeToken: String, name: String) {
            print("üéâ –°–û–ó–î–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ì–û –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö YOUTUBE TV")
            print("üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: \(name)")
            print("üîë Lounge Token: \(loungeToken)")
            print("üìü Screen ID: \(tvCode)")
            
            let device = YouTubeTVDevice(
                id: tvCode,
                name: name,
                model: "YouTube TV",
                ipAddress: "YouTube Cloud",
                port: 443,
                location: "https://www.youtube.com/api/lounge",
                tvCode: tvCode,
                loungeToken: loungeToken,
                isConnected: true,
                capabilities: ["youtube", "sponsorblock"]
            )
            
            // –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º
            connectedDevices.append(device)
            connectionStatus = .connected
            
            print("üöÄ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –°–û–ó–î–ê–ù–û! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ TV...")
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ —É–≤–µ–¥–æ–º–ª—è–µ–º TV, –ø–æ—Ç–æ–º –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            sendConnectionNotification(to: device)
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã TV —É—Å–ø–µ–ª –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) { [weak self] in
                self?.startMonitoring(device: device)
                print("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω")
            }
            
            print("‚úÖ –†–ï–ê–õ–¨–ù–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö \(name) –ó–ê–í–ï–†–®–ï–ù–û!")
            print("üì∫ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç–∫—Ä–∞–Ω TV - –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è 'connected new device'")
        }
        
        private func createRealConnection(tvCode: String, deviceURL: String) {
            print("üéâ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ DIAL")
            
            let device = YouTubeTVDevice(
                id: tvCode,
                name: "YouTube TV (DIAL)",
                model: "Smart TV",
                ipAddress: URL(string: deviceURL)?.host ?? "unknown",
                port: 8008,
                location: deviceURL,
                capabilities: ["youtube", "dial"]
            )
            
            connectedDevices.append(device)
            connectionStatus = .connected
            
            startMonitoring(device: device)
            
            print("‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ DIAL!")
        }
        
                private func sendConnectionNotification(to device: YouTubeTVDevice) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –†–ï–ê–õ–¨–ù–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ TV –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            guard let loungeToken = device.loungeToken,
                  let url = URL(string: "https://www.youtube.com/api/lounge/bc/bind") else {
                print("‚ùå –ù–µ—Ç lounge token –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è TV")
                return
            }
            
            print("üì° –û–¢–ü–†–ê–í–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ù–ê TV")
            print("üîë Token: \(loungeToken)")
            
            var request = URLRequest(url: url)
            request.httpMethod = "POST"
            request.timeoutInterval = 15.0
            
            // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ —É —Ä–µ–∞–ª—å–Ω–æ–≥–æ YouTube TV –∫–ª–∏–µ–Ω—Ç–∞
            request.setValue("application/x-www-form-urlencoded; charset=UTF-8", forHTTPHeaderField: "Content-Type")
            request.setValue("Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15", forHTTPHeaderField: "User-Agent")
            request.setValue("https://www.youtube.com", forHTTPHeaderField: "Origin")
            request.setValue("https://www.youtube.com/tv", forHTTPHeaderField: "Referer")
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            let randomId = Int.random(in: 10000...99999)
            let bodyData = """
                VER=8&RID=\(randomId)&loungeIdToken=\(loungeToken)&count=0&req0_newClientConnected=iSponsorBlockTV_iOS
                """
            request.httpBody = bodyData.data(using: .utf8)
            
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ TV:")
            print("   Body: \(bodyData)")
            
            session.dataTask(with: request) { data, response, error in
                DispatchQueue.main.async {
                    if let httpResponse = response as? HTTPURLResponse {
                        print("üìä TV Response Status: \(httpResponse.statusCode)")
                        
                        if httpResponse.statusCode == 200 {
                            print("‚úÖ –£–°–ü–ï–•! TV –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏!")
                            print("üì∫ –ù–∞ —ç–∫—Ä–∞–Ω–µ TV –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è 'connected new device'")
                        } else {
                            print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç TV: \(httpResponse.statusCode)")
                        }
                    }
                    
                    if let error = error {
                        print("‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è TV: \(error.localizedDescription)")
                    }
                    
                    if let data = data, let responseString = String(data: data, encoding: .utf8) {
                        print("üì¶ TV –æ—Ç–≤–µ—Ç–∏–ª: '\(responseString)'")
                    } else {
                        print("üì¶ TV –æ—Ç–≤–µ—Ç–∏–ª –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö")
                    }
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                self.sendConnectionConfirmation(to: device)
            }.resume()
        }
        
        private func sendConnectionConfirmation(to device: YouTubeTVDevice) {
            guard let loungeToken = device.loungeToken,
                  let url = URL(string: "https://www.youtube.com/api/lounge/bc/bind") else {
                return
            }
            
            print("üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
            
            var request = URLRequest(url: url)
            request.httpMethod = "POST"
            request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
            
            let confirmationData = """
                VER=8&RID=\(Int.random(in: 10000...99999))&loungeIdToken=\(loungeToken)&count=1&req0_clientConnected=true
                """
            request.httpBody = confirmationData.data(using: .utf8)
            
            session.dataTask(with: request) { data, response, error in
                if let httpResponse = response as? HTTPURLResponse,
                   httpResponse.statusCode == 200 {
                    print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ TV")
                }
            }.resume()
        }
        
        private func createSuccessfulConnection(tvCode: String, token: String, name: String) {
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω: \(token)")
            
            let device = YouTubeTVDevice(
                id: tvCode,
                name: name,
                ipAddress: "YouTube TV",
                port: 0,
                location: "",
                tvCode: tvCode,
                loungeToken: token,
                isConnected: true
            )
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
            if !connectedDevices.contains(where: { $0.id == device.id }) {
                connectedDevices.append(device)
            }
            
            connectionStatus = .connected
            startMonitoring(device: device)
            print("üéâ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ \(name)")
        }
        
        private func createTestConnection(tvCode: String) {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            let device = YouTubeTVDevice(
                id: tvCode,
                name: "YouTube TV (–¢–µ—Å—Ç)",
                ipAddress: "YouTube TV",
                port: 0,
                location: "",
                tvCode: tvCode,
                loungeToken: "test_token_\(tvCode)",
                isConnected: true
            )
            
            if !connectedDevices.contains(where: { $0.id == device.id }) {
                connectedDevices.append(device)
            }
            
            connectionStatus = .connected
            startMonitoring(device: device)
            print("üéâ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º \(tvCode)")
        }
        
        // MARK: - Device Monitoring
        private func startMonitoring(device: YouTubeTVDevice) {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            stopMonitoring()
            
            // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π lounge token, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —á–∞—Å—Ç—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            let interval: TimeInterval = device.loungeToken != nil ? 3.0 : 5.0
            
            // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä —Å weak self –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è retain cycle
            monitoringTimer = Timer.scheduledTimer(withTimeInterval: interval, repeats: true) { [weak self] _ in
                self?.checkCurrentVideo(for: device)
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –≤ RunLoop –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ–Ω–µ
            if let timer = monitoringTimer {
                RunLoop.current.add(timer, forMode: .common)
            }
            
            let monitoringType = device.loungeToken != nil ? "—Ä–µ–∞–ª—å–Ω—ã–π YouTube TV API" : "—ç–º—É–ª—è—Ü–∏—è"
            print("üîÑ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ \(device.name) —á–µ—Ä–µ–∑ \(monitoringType)")
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å lounge token, —Ç–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∏–Ω–¥–∏–Ω–≥ –¥–ª—è real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if let loungeToken = device.loungeToken {
                establishLoungeBinding(loungeToken: loungeToken, device: device)
            }
        }
        
        private func establishLoungeBinding(loungeToken: String, device: YouTubeTVDevice) {
            guard let url = URL(string: "https://www.youtube.com/api/lounge/bc/bind") else { return }
            
            var request = URLRequest(url: url)
            request.httpMethod = "POST"
            request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
            request.timeoutInterval = 30.0
            
            let bodyData = "loungeIdToken=\(loungeToken)&count=0&req0_nowplayingUpdated=true"
            request.httpBody = bodyData.data(using: .utf8)
            
            print("üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º real-time –±–∏–Ω–¥–∏–Ω–≥ —Å YouTube TV")
            
            session.dataTask(with: request) { [weak self] data, response, error in
                if let data = data,
                let responseString = String(data: data, encoding: .utf8) {
                    print("üì∫ Lounge binding –æ—Ç–≤–µ—Ç: \(responseString)")
                    self?.parseLoungeResponse(responseString, device: device)
                } else if let error = error {
                    print("‚ùå –û—à–∏–±–∫–∞ lounge binding: \(error.localizedDescription)")
                }
            }.resume()
        }
        
        private func parseLoungeResponse(_ response: String, device: YouTubeTVDevice) {
            // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç YouTube TV lounge API –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            if response.contains("nowPlaying") || response.contains("nowplayingUpdated") {
                // –í–∏–¥–µ–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if let videoId = extractVideoIdFromLoungeResponse(response) {
                    print("üì∫ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Lounge API: \(videoId)")
                    DispatchQueue.main.async {
                        self.currentVideoId = videoId
                        
                        // –°–æ–∑–¥–∞–µ–º VideoInfo –æ–±—ä–µ–∫—Ç
                        let videoInfo = VideoInfo(
                            videoId: videoId,
                            title: "–í–∏–¥–µ–æ —Å YouTube TV",
                            channelName: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª",
                            duration: 0,
                            currentTime: 0
                        )
                        self.currentVideoInfo = videoInfo
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã
                        self.checkSponsorSegmentsWithTimeout(videoId: videoId, device: device)
                    }
                }
            }
        }
        
        private func extractVideoIdFromLoungeResponse(_ response: String) -> String? {
            // –ò—â–µ–º video ID –≤ –æ—Ç–≤–µ—Ç–µ YouTube TV API
            let patterns = [
                "\"videoId\":\"([a-zA-Z0-9_-]{11})\"",
                "videoId=([a-zA-Z0-9_-]{11})",
                "video_id=([a-zA-Z0-9_-]{11})",
                "v=([a-zA-Z0-9_-]{11})"
            ]
            
            for pattern in patterns {
                if let regex = try? NSRegularExpression(pattern: pattern),
                let match = regex.firstMatch(in: response, range: NSRange(response.startIndex..., in: response)),
                let range = Range(match.range(at: 1), in: response) {
                    return String(response[range])
                }
            }
            
            return nil
        }
        
        private func stopMonitoring() {
            monitoringTimer?.invalidate()
            monitoringTimer = nil
            print("‚è∏Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        }
        
        private func checkCurrentVideo(for device: YouTubeTVDevice) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—Å–µ –µ—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
            guard connectedDevices.contains(where: { $0.id == device.id && $0.isConnected }) else {
                print("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ \(device.name) –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                stopMonitoring()
                return
            }
            
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ –Ω–∞ \(device.name)")
            
                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
            getCurrentVideoInfo(for: device) { [weak self] videoInfo in
                DispatchQueue.main.async {
                    if let videoInfo = videoInfo {
                        print("üì∫ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: \(videoInfo.videoId) - \(videoInfo.title)")
                        self?.currentVideoId = videoInfo.videoId
                        self?.currentVideoInfo = videoInfo
                        self?.checkSponsorSegmentsWithTimeout(videoId: videoInfo.videoId, device: device)
                    } else {
                        print("üì∫ –í–∏–¥–µ–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID")
                        self?.currentVideoId = nil
                        self?.currentVideoInfo = nil
                    }
                }
            }
        }
        
        private func getCurrentVideoInfo(for device: YouTubeTVDevice, completion: @escaping (VideoInfo?) -> Void) {
            // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
            
            // –°–ø–æ—Å–æ–± 1: YouTube TV Lounge API
            if let loungeToken = device.loungeToken {
                getCurrentVideoViaLounge(token: loungeToken, completion: completion)
                return
            }
            
            // –°–ø–æ—Å–æ–± 2: –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ DIAL API
            if !device.ipAddress.isEmpty && device.ipAddress != "YouTube TV" {
                getCurrentVideoViaDial(ipAddress: device.ipAddress, port: device.port, completion: completion)
                return
            }
            
            // –°–ø–æ—Å–æ–± 3: –≠–º—É–ª—è—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            let simulatedVideoIds = [
                "dQw4w9WgXcQ", // Rick Roll
                "jNQXAC9IVRw", // Me at the zoo
                "9bZkp7q19f0", // Gangnam Style
                "kJQP7kiw5Fk", // Despacito
                "RgKAFK5djSk", // Wiz Khalifa
            ]
            
            // –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            if let randomVideoId = simulatedVideoIds.randomElement() {
                let videoInfo = VideoInfo(
                    videoId: randomVideoId,
                    title: "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ",
                    channelName: "Test Channel",
                    duration: 180,
                    currentTime: Double.random(in: 10...120)
                )
                DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                    completion(videoInfo)
                }
            } else {
                completion(nil)
            }
        }
        
        private func getCurrentVideoViaLounge(token: String, completion: @escaping (VideoInfo?) -> Void) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º YouTube TV Lounge API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            let loungeURL = "https://www.youtube.com/api/lounge/bc/bind"
            var request = URLRequest(url: URL(string: loungeURL)!)
            request.httpMethod = "POST"
            request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
            
            let body = "VER=8&RID=1337&lounge_token=\(token)&req0_getPlayerInfo=1"
            request.httpBody = body.data(using: .utf8)
            
            session.dataTask(with: request) { data, response, error in
                if let data = data, let responseString = String(data: data, encoding: .utf8) {
                    print("üì¶ Lounge API –æ—Ç–≤–µ—Ç: \(responseString)")
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å videoId –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    if let videoId = self.extractVideoId(from: responseString) {
                        let videoInfo = VideoInfo(
                            videoId: videoId,
                            title: "YouTube TV Video",
                            channelName: "Unknown",
                            duration: 0,
                            currentTime: 0
                        )
                        DispatchQueue.main.async {
                            completion(videoInfo)
                        }
                    } else {
                        DispatchQueue.main.async {
                            completion(nil)
                        }
                    }
                } else {
                    DispatchQueue.main.async {
                        completion(nil)
                    }
                }
            }.resume()
        }
        
        private func getCurrentVideoViaDial(ipAddress: String, port: Int, completion: @escaping (VideoInfo?) -> Void) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º DIAL –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            let dialURL = "http://\(ipAddress):\(port)/apps/YouTube"
            
            var request = URLRequest(url: URL(string: dialURL)!)
            request.httpMethod = "GET"
            request.timeoutInterval = 3.0
            
            session.dataTask(with: request) { data, response, error in
                if let data = data, let responseString = String(data: data, encoding: .utf8) {
                    print("üì¶ DIAL –æ—Ç–≤–µ—Ç: \(responseString)")
                    
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º videoId –∏–∑ DIAL –æ—Ç–≤–µ—Ç–∞
                    if let videoId = self.extractVideoId(from: responseString) {
                        let videoInfo = VideoInfo(
                            videoId: videoId,
                            title: "Cast Video",
                            channelName: "Unknown",
                            duration: 0,
                            currentTime: 0
                        )
                        DispatchQueue.main.async {
                            completion(videoInfo)
                        }
                    } else {
                        DispatchQueue.main.async {
                            completion(nil)
                        }
                    }
                } else {
                    DispatchQueue.main.async {
                        completion(nil)
                    }
                }
            }.resume()
        }
        
        private func extractVideoId(from response: String) -> String? {
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ videoId –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            let patterns = [
                "\"videoId\":\"([a-zA-Z0-9_-]+)\"",
                "videoId=([a-zA-Z0-9_-]+)",
                "v=([a-zA-Z0-9_-]+)",
                "watch\\?v=([a-zA-Z0-9_-]+)"
            ]
            
            for pattern in patterns {
                if let regex = try? NSRegularExpression(pattern: pattern),
                let match = regex.firstMatch(in: response, range: NSRange(response.startIndex..., in: response)),
                let range = Range(match.range(at: 1), in: response) {
                    let videoId = String(response[range])
                    if videoId.count == 11 { // YouTube video IDs are 11 characters
                        return videoId
                    }
                }
            }
            
            return nil
        }
        
        private func checkSponsorSegmentsWithTimeout(videoId: String, device: YouTubeTVDevice) {
            let timeoutTimer = Timer.scheduledTimer(withTimeInterval: 3.0, repeats: false) { _ in
                print("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è \(videoId)")
            }
            
            checkSponsorSegments(videoId: videoId) { [weak self] segments in
                timeoutTimer.invalidate()
                
                if !segments.isEmpty {
                    print("üéØ –ù–∞–π–¥–µ–Ω–æ \(segments.count) —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è \(videoId)")
                    
                    // –≠–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–ø—É—Å–∫ —Å–µ–≥–º–µ–Ω—Ç–∞
                    if let firstSegment = segments.first {
                        self?.skipToTime(firstSegment.segment[1], on: device)
                    }
                }
            }
        }
        
        // MARK: - Sponsor Block Integration
        func checkSponsorSegments(videoId: String, completion: @escaping ([SponsorSegment]) -> Void) {
            let sponsorBlockAPI = "https://sponsor.ajay.app/api/skipSegments"
            var components = URLComponents(string: sponsorBlockAPI)!
            components.queryItems = [
                URLQueryItem(name: "videoID", value: videoId),
                URLQueryItem(name: "categories", value: "[\"sponsor\",\"intro\",\"outro\",\"interaction\",\"selfpromo\"]")
            ]
            
            guard let url = components.url else {
                completion([])
                return
            }
            
            session.dataTask(with: url) { data, response, error in
                guard let data = data else {
                    completion([])
                    return
                }
                
                do {
                    let segments = try JSONDecoder().decode([SponsorSegment].self, from: data)
                    DispatchQueue.main.async {
                        completion(segments)
                    }
                } catch {
                    print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SponsorBlock –¥–∞–Ω–Ω—ã—Ö: \(error)")
                    completion([])
                }
            }.resume()
        }
        
        // MARK: - Device Control
        func skipToTime(_ time: Double, on device: YouTubeTVDevice) {
            print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ \(time) –Ω–∞ \(device.name)")
            
            let skipCommand = YouTubeTVCommand.seek(time: time)
            sendCommand(skipCommand, to: device)
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            YouTubeTVSettings.shared.recordSkippedSegment(duration: 5.0, category: "sponsor")
        }
        
        func muteDevice(_ device: YouTubeTVDevice) {
            let muteCommand = YouTubeTVCommand.mute
            sendCommand(muteCommand, to: device)
        }
        
        private func sendCommand(_ command: YouTubeTVCommand, to device: YouTubeTVDevice) {
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É \(command) –Ω–∞ \(device.name)")
            
            // –°–ø–æ—Å–æ–± 1: YouTube TV Lounge API
            if let loungeToken = device.loungeToken {
                sendCommandViaLounge(command, token: loungeToken, device: device)
                return
            }
            
            // –°–ø–æ—Å–æ–± 2: DIAL API
            if !device.ipAddress.isEmpty && device.ipAddress != "YouTube TV" {
                sendCommandViaDial(command, to: device)
                return
            }
            
            // –°–ø–æ—Å–æ–± 3: –≠–º—É–ª—è—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ \(command) –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (—ç–º—É–ª—è—Ü–∏—è)")
        }
        
        private func sendCommandViaLounge(_ command: YouTubeTVCommand, token: String, device: YouTubeTVDevice) {
            let loungeURL = "https://www.youtube.com/api/lounge/bc/bind"
            var request = URLRequest(url: URL(string: loungeURL)!)
            request.httpMethod = "POST"
            request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
            
            var commandBody = ""
            switch command {
            case .seek(let time):
                commandBody = "req0_seekTo=\(Int(time))"
            case .mute:
                commandBody = "req0_setVolume=0"
            case .unmute:
                commandBody = "req0_setVolume=50"
            case .play:
                commandBody = "req0_play="
            case .pause:
                commandBody = "req0_pause="
            case .skip:
                commandBody = "req0_next="
            }
            
            let body = "VER=8&RID=\(Int.random(in: 1000...9999))&lounge_token=\(token)&\(commandBody)"
            request.httpBody = body.data(using: .utf8)
            
            session.dataTask(with: request) { data, response, error in
                if let error = error {
                    print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ Lounge API: \(error)")
                } else {
                    print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ Lounge API")
                }
            }.resume()
        }
        
        private func sendCommandViaDial(_ command: YouTubeTVCommand, to device: YouTubeTVDevice) {
            var dialURL = ""
            var httpMethod = "POST"
            
            switch command {
            case .seek(let time):
                dialURL = "http://\(device.ipAddress):\(device.port)/apps/YouTube/web-1?t=\(Int(time))"
                httpMethod = "POST"
            case .mute, .unmute:
                dialURL = "http://\(device.ipAddress):\(device.port)/apps/YouTube/run"
                httpMethod = "POST"
            default:
                dialURL = "http://\(device.ipAddress):\(device.port)/apps/YouTube"
                httpMethod = "POST"
            }
            
            guard let url = URL(string: dialURL) else { return }
            
            var request = URLRequest(url: url)
            request.httpMethod = httpMethod
            request.setValue("text/plain", forHTTPHeaderField: "Content-Type")
            
            session.dataTask(with: request) { data, response, error in
                if let httpResponse = response as? HTTPURLResponse {
                    if httpResponse.statusCode == 200 || httpResponse.statusCode == 201 {
                        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ DIAL API")
                    } else {
                        print("‚ö†Ô∏è DIAL API –æ—Ç–≤–µ—Ç–∏–ª —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: \(httpResponse.statusCode)")
                    }
                }
                
                if let error = error {
                    print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ DIAL API: \(error)")
                }
            }.resume()
        }
        
        // MARK: - Cleanup
        func disconnect() {
            print("üîå –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
            
            connectionStatus = .disconnected
            connectedDevices.removeAll()
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            stopMonitoring()
            
            // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–¥–∞—á–∏
            session.invalidateAndCancel()
            
            print("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        }
        
        deinit {
            print("üóëÔ∏è YouTubeTVManager –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è –∏–∑ –ø–∞–º—è—Ç–∏")
            disconnect()
        }
    }
