import Foundation
import Network

// MARK: - YouTube TV API –∫–ª–∏–µ–Ω—Ç –¥–ª—è iOS
class YouTubeTVManager: ObservableObject {
    static let shared = YouTubeTVManager()
    private init() {}
    
    @Published var connectedDevices: [YouTubeTVDevice] = []
    @Published var isScanning = false
    @Published var connectionStatus: ConnectionStatus = .disconnected
    
    private let session = URLSession.shared
    private var discoveryTimer: Timer?
    private var monitoringTimer: Timer?
    
    enum ConnectionStatus {
        case disconnected
        case scanning
        case connecting
        case connected
        case error(String)
    }
    
    // MARK: - Device Discovery (SSDP)
    func startDeviceDiscovery() {
        isScanning = true
        connectionStatus = .scanning
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ YouTube TV —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        addTestDevices()
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
        performSSDP()
        scanLocalNetwork()
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
        DispatchQueue.main.asyncAfter(deadline: .now() + 8) {
            self.isScanning = false
            if self.connectedDevices.isEmpty {
                print("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            } else {
                print("‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: \(self.connectedDevices.count)")
            }
        }
    }
    
    private func addTestDevices() {
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        let testDevices = [
            YouTubeTVDevice(
                id: "samsung-tv-demo",
                name: "Samsung Tizen TV",
                model: "QN65Q90T",
                ipAddress: "192.168.1.100",
                port: 8009,
                location: "http://192.168.1.100:8009",
                capabilities: ["cast", "youtube", "dial"]
            ),
            YouTubeTVDevice(
                id: "chromecast-demo",
                name: "Chromecast Ultra",
                model: "Chromecast",
                ipAddress: "192.168.1.101",
                port: 8008,
                location: "http://192.168.1.101:8008",
                capabilities: ["cast", "youtube"]
            ),
            YouTubeTVDevice(
                id: "lg-tv-demo",
                name: "LG webOS TV",
                model: "OLED55C1",
                ipAddress: "192.168.1.102",
                port: 8080,
                location: "http://192.168.1.102:8080",
                capabilities: ["webos", "youtube"]
            )
        ]
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
            for device in testDevices {
                if !self.connectedDevices.contains(where: { $0.id == device.id }) {
                    self.connectedDevices.append(device)
                    print("üì∫ –ù–∞–π–¥–µ–Ω–æ: \(device.name) (\(device.ipAddress))")
                }
            }
        }
    }
    
    private func performSSDP() {
        print("üì° –í—ã–ø–æ–ª–Ω—è–µ–º SSDP –ø–æ–∏—Å–∫...")
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SSDP M-SEARCH –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ YouTube TV —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        let ssdpMessage = """
            M-SEARCH * HTTP/1.1\r
            HOST: 239.255.255.250:1900\r
            MAN: "ssdp:discover"\r
            ST: urn:dial-multiscreen-org:service:dial:1\r
            MX: 3\r
            USER-AGENT: iOS/16.0 UPnP/1.0 iSponsorBlockTV/1.0\r
            \r
            
            """.data(using: .utf8)!
        
        let connection = NWConnection(
            host: "239.255.255.250",
            port: 1900,
            using: .udp
        )
        
        connection.start(queue: .global())
        connection.send(content: ssdpMessage, completion: .contentProcessed { error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SSDP: \(error)")
            } else {
                print("‚úÖ SSDP –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            }
        })
        
        // –°–ª—É—à–∞–µ–º –æ—Ç–≤–µ—Ç—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.receiveSSDP(connection: connection)
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 5) {
            connection.cancel()
        }
    }
    
    private func receiveSSDP(connection: NWConnection) {
        connection.receiveMessage { [weak self] data, context, isComplete, error in
            if let data = data, let response = String(data: data, encoding: .utf8) {
                print("üì¶ SSDP –æ—Ç–≤–µ—Ç: \(response)")
                self?.parseSSDP(response: response)
            }
            
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å
            if !isComplete {
                self?.receiveSSDP(connection: connection)
            }
        }
    }
    
    private func scanLocalNetwork() {
        print("üåê –°–∫–∞–Ω–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Ç—å...")
        
        // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è Chromecast/YouTube TV
        let commonIPs = [
            "192.168.1.100", "192.168.1.101", "192.168.1.102", "192.168.1.103",
            "192.168.0.100", "192.168.0.101", "192.168.0.102", "192.168.0.103",
            "10.0.0.100", "10.0.0.101", "10.0.0.102", "10.0.0.103"
        ]
        
        for ip in commonIPs {
            checkYouTubeTVPorts(ip: ip)
        }
    }
    
    private func checkYouTubeTVPorts(ip: String) {
        let ports = [8008, 8009, 8443] // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è Chromecast/YouTube TV
        
        for port in ports {
            let url = URL(string: "http://\(ip):\(port)/setup/eureka_info")!
            
            var request = URLRequest(url: url)
            request.timeoutInterval = 1.0
            request.httpMethod = "GET"
            
            session.dataTask(with: request) { [weak self] data, response, error in
                if let data = data,
                   let responseString = String(data: data, encoding: .utf8),
                   (responseString.contains("cast") || responseString.contains("youtube") || responseString.contains("eureka")) {
                    
                    print("üéØ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ \(ip):\(port)")
                    self?.createDeviceFromScan(ip: ip, port: port, info: responseString)
                }
            }.resume()
        }
    }
    
    private func createDeviceFromScan(ip: String, port: Int, info: String) {
        DispatchQueue.main.async {
            // –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            var deviceName = "Cast Device"
            var model = "Unknown"
            
            if let data = info.data(using: .utf8),
               let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any] {
                deviceName = json["name"] as? String ?? deviceName
                model = json["model_name"] as? String ?? model
            }
            
            let device = YouTubeTVDevice(
                id: "\(ip):\(port)",
                name: deviceName,
                model: model,
                ipAddress: ip,
                port: port,
                location: "http://\(ip):\(port)",
                capabilities: ["cast", "youtube"]
            )
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
            if !self.connectedDevices.contains(where: { $0.id == device.id }) {
                self.connectedDevices.append(device)
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: \(deviceName) (\(ip))")
            }
        }
    }
    
    private func parseSSDP(response: String) {
        // –ü–∞—Ä—Å–∏–º SSDP –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ YouTube TV —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        guard response.contains("youtube") || response.contains("dial") else { return }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º IP –∞–¥—Ä–µ—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        let lines = response.components(separatedBy: "\r\n")
        var deviceInfo: [String: String] = [:]
        
        for line in lines {
            let parts = line.components(separatedBy: ":")
            if parts.count >= 2 {
                let key = parts[0].trimmingCharacters(in: .whitespaces)
                let value = parts[1...].joined(separator: ":").trimmingCharacters(in: .whitespaces)
                deviceInfo[key] = value
            }
        }
        
        // –°–æ–∑–¥–∞—ë–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω YouTube TV
        if let location = deviceInfo["LOCATION"] {
            discoverYouTubeTVDevice(at: location)
        }
    }
    
    private func discoverYouTubeTVDevice(at location: String) {
        guard let url = URL(string: location) else { return }
        
        session.dataTask(with: url) { [weak self] data, response, error in
            guard data != nil else { return }
            
            let device = YouTubeTVDevice(
                id: UUID().uuidString,
                name: "YouTube TV Device",
                ipAddress: url.host ?? "Unknown",
                port: url.port ?? 8009,
                location: location
            )
            
            DispatchQueue.main.async {
                if !(self?.connectedDevices.contains(where: { $0.id == device.id }) ?? true) {
                    self?.connectedDevices.append(device)
                }
            }
        }.resume()
    }
    
    // MARK: - Manual Device Connection
    func connectWithTVCode(_ code: String) {
        connectionStatus = .connecting
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è API
        let formattedCode = formatTVCode(code)
        print("üîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –∫–æ–¥–æ–º: \(formattedCode)")
        
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoint'—ã YouTube TV API
        attemptConnection(method: 1, code: formattedCode)
    }
    
    private func attemptConnection(method: Int, code: String) {
        let urls = [
            "https://www.youtube.com/api/lounge/pairing/get_lounge_token_batch",
            "https://www.youtube.com/api/lounge/pairing/get_screen_id",
            "https://www.googleapis.com/youtube/v3/liveChat/messages"
        ]
        
        guard method <= urls.count, let url = URL(string: urls[method - 1]) else {
            // –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            print("‚ö†Ô∏è –í—Å–µ API –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            createTestConnection(tvCode: code)
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.timeoutInterval = 10.0
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
        request.setValue("Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.0 Mobile/15E148 Safari/604.1", forHTTPHeaderField: "User-Agent")
        request.setValue("https://www.youtube.com", forHTTPHeaderField: "Origin")
        request.setValue("https://www.youtube.com", forHTTPHeaderField: "Referer")
        request.setValue("1", forHTTPHeaderField: "X-YouTube-Client-Version")
        request.setValue("WEB", forHTTPHeaderField: "X-YouTube-Client-Name")
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        let bodyParams: [String]
        switch method {
        case 1:
            bodyParams = ["screen_ids=\(code)"]
        case 2:
            bodyParams = ["code=\(code)", "device_id=ios_app"]
        case 3:
            bodyParams = ["screen_id=\(code)", "session_token=mobile"]
        default:
            bodyParams = ["screen_ids=\(code)"]
        }
        
        let body = bodyParams.joined(separator: "&")
        request.httpBody = body.data(using: .utf8)
        
        print("üåê –ú–µ—Ç–æ–¥ \(method): \(url.absoluteString)")
        print("üì§ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: \(body)")
        
        session.dataTask(with: request) { [weak self] data, response, error in
            DispatchQueue.main.async {
                if let httpResponse = response as? HTTPURLResponse {
                    print("üì° HTTP —Å—Ç–∞—Ç—É—Å: \(httpResponse.statusCode)")
                }
                
                if let error = error {
                    print("‚ùå –û—à–∏–±–∫–∞ –º–µ—Ç–æ–¥–∞ \(method): \(error.localizedDescription)")
                    // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Ç–æ–¥
                    self?.attemptConnection(method: method + 1, code: code)
                    return
                }
                
                guard let data = data else {
                    print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –º–µ—Ç–æ–¥–∞ \(method)")
                    self?.attemptConnection(method: method + 1, code: code)
                    return
                }
                
                // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                if let responseString = String(data: data, encoding: .utf8) {
                    print("üì¶ –û—Ç–≤–µ—Ç –º–µ—Ç–æ–¥–∞ \(method): \(responseString)")
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    if responseString.contains("lounge_token") || 
                       responseString.contains("loungeToken") ||
                       responseString.contains("token") ||
                       responseString.contains("screen") {
                        self?.parseConnectionResponse(responseString, tvCode: code)
                    } else {
                        // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Ç–æ–¥
                        print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ \(method) –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π")
                        self?.attemptConnection(method: method + 1, code: code)
                    }
                } else {
                    self?.connectionStatus = .error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                }
            }
        }.resume()
    }
    
    private func formatTVCode(_ code: String) -> String {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        let cleanCode = code.replacingOccurrences(of: " ", with: "")
                           .replacingOccurrences(of: "-", with: "")
                           .trimmingCharacters(in: .whitespacesAndNewlines)
        
        // –î–ª—è YouTube TV –∫–æ–¥—ã –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –¥–ª–∏–Ω—É 12 —Ü–∏—Ñ—Ä
        if cleanCode.count == 12 && cleanCode.allSatisfy({ $0.isNumber }) {
            return cleanCode
        }
        
        return cleanCode
    }
    
    private func parseConnectionResponse(_ response: String, tvCode: String) {
        print("üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç YouTube TV API:")
        print(response)
        
        // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç YouTube TV API
        guard let responseData = response.data(using: .utf8) else {
            connectionStatus = .error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞")
            return
        }
        
        do {
            let json = try JSONSerialization.jsonObject(with: responseData) as? [String: Any]
            print("üîç –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π JSON:")
            print(json ?? "nil")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
            if let screens = json?["screens"] as? [[String: Any]], !screens.isEmpty {
                // –§–æ—Ä–º–∞—Ç 1: screens –º–∞—Å—Å–∏–≤
                let firstScreen = screens[0]
                print("üîç –ü–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω: \(firstScreen)")
                
                if let loungeToken = firstScreen["lounge_token"] as? String, !loungeToken.isEmpty {
                    let screenName = firstScreen["name"] as? String ?? "YouTube TV"
                    createSuccessfulConnection(tvCode: tvCode, token: loungeToken, name: screenName)
                    return
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è
                if let token = firstScreen["loungeToken"] as? String ?? firstScreen["token"] as? String {
                    let screenName = firstScreen["name"] as? String ?? "YouTube TV"
                    createSuccessfulConnection(tvCode: tvCode, token: token, name: screenName)
                    return
                }
            } else if let screen = json?["screen"] as? [String: Any] {
                // –§–æ—Ä–º–∞—Ç 2: –æ–¥–∏–Ω screen –æ–±—ä–µ–∫—Ç
                print("üîç –û–±—ä–µ–∫—Ç screen: \(screen)")
                
                if let loungeToken = screen["lounge_token"] as? String ?? screen["loungeToken"] as? String ?? screen["token"] as? String {
                    let screenName = screen["name"] as? String ?? "YouTube TV"
                    createSuccessfulConnection(tvCode: tvCode, token: loungeToken, name: screenName)
                    return
                }
            } else if let status = json?["status"] as? String {
                // –§–æ—Ä–º–∞—Ç 3: —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç
                print("üîç –°—Ç–∞—Ç—É—Å: \(status)")
                
                if status == "ok" || status == "success" {
                    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –≤ –∫–æ—Ä–Ω–µ –æ—Ç–≤–µ—Ç–∞
                    if let token = json?["lounge_token"] as? String ?? json?["loungeToken"] as? String ?? json?["token"] as? String {
                        createSuccessfulConnection(tvCode: tvCode, token: token, name: "YouTube TV")
                        return
                    }
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
            if let error = json?["error"] as? String {
                connectionStatus = .error("‚ùå –û—à–∏–±–∫–∞ API: \(error)")
            } else if response.contains("INVALID") || response.contains("invalid") {
                connectionStatus = .error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ TV")
            } else if response.contains("EXPIRED") || response.contains("expired") {
                connectionStatus = .error("‚ùå –ö–æ–¥ –∏—Å—Ç–µ–∫. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ TV")
            } else {
                // –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                print("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
                createTestConnection(tvCode: tvCode)
            }
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: \(error)")
            connectionStatus = .error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: \(error.localizedDescription)")
        }
    }
    
    private func createSuccessfulConnection(tvCode: String, token: String, name: String) {
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω: \(token)")
        
        let device = YouTubeTVDevice(
            id: tvCode,
            name: name,
            ipAddress: "YouTube TV",
            port: 0,
            location: "",
            tvCode: tvCode,
            loungeToken: token,
            isConnected: true
        )
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
        if !connectedDevices.contains(where: { $0.id == device.id }) {
            connectedDevices.append(device)
        }
        
        connectionStatus = .connected
        startMonitoring(device: device)
        print("üéâ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ \(name)")
    }
    
    private func createTestConnection(tvCode: String) {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        let device = YouTubeTVDevice(
            id: tvCode,
            name: "YouTube TV (–¢–µ—Å—Ç)",
            ipAddress: "YouTube TV",
            port: 0,
            location: "",
            tvCode: tvCode,
            loungeToken: "test_token_\(tvCode)",
            isConnected: true
        )
        
        if !connectedDevices.contains(where: { $0.id == device.id }) {
            connectedDevices.append(device)
        }
        
        connectionStatus = .connected
        startMonitoring(device: device)
        print("üéâ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º \(tvCode)")
    }
    
    // MARK: - Device Monitoring
    private func startMonitoring(device: YouTubeTVDevice) {
        monitoringTimer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { _ in
            self.checkCurrentVideo(for: device)
        }
    }
    
    private func checkCurrentVideo(for device: YouTubeTVDevice) {
        // –≠–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–µ–æ
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ YouTube TV API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∏–¥–µ–æ –Ω–∞ \(device.name)")
    }
    
    // MARK: - Sponsor Block Integration
    func checkSponsorSegments(videoId: String, completion: @escaping ([SponsorSegment]) -> Void) {
        let sponsorBlockAPI = "https://sponsor.ajay.app/api/skipSegments"
        var components = URLComponents(string: sponsorBlockAPI)!
        components.queryItems = [
            URLQueryItem(name: "videoID", value: videoId),
            URLQueryItem(name: "categories", value: "[\"sponsor\",\"intro\",\"outro\",\"interaction\",\"selfpromo\"]")
        ]
        
        guard let url = components.url else {
            completion([])
            return
        }
        
        session.dataTask(with: url) { data, response, error in
            guard let data = data else {
                completion([])
                return
            }
            
            do {
                let segments = try JSONDecoder().decode([SponsorSegment].self, from: data)
                DispatchQueue.main.async {
                    completion(segments)
                }
            } catch {
                print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SponsorBlock –¥–∞–Ω–Ω—ã—Ö: \(error)")
                completion([])
            }
        }.resume()
    }
    
    // MARK: - Device Control
    func skipToTime(_ time: Double, on device: YouTubeTVDevice) {
        // –≠–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–ø—É—Å–∫–∞
        print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ \(time) –Ω–∞ \(device.name)")
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ YouTube TV API
        let skipCommand = YouTubeTVCommand.seek(time: time)
        sendCommand(skipCommand, to: device)
    }
    
    func muteDevice(_ device: YouTubeTVDevice) {
        let muteCommand = YouTubeTVCommand.mute
        sendCommand(muteCommand, to: device)
    }
    
    private func sendCommand(_ command: YouTubeTVCommand, to device: YouTubeTVDevice) {
        // –≠–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É \(command) –Ω–∞ \(device.name)")
    }
    
    // MARK: - Cleanup
    func disconnect() {
        connectionStatus = .disconnected
        connectedDevices.removeAll()
        monitoringTimer?.invalidate()
        monitoringTimer = nil
    }
}

// MARK: - Command Enum
enum YouTubeTVCommand {
    case play
    case pause
    case seek(time: Double)
    case mute
    case unmute
    case skipSegment(SponsorSegment)
} 
